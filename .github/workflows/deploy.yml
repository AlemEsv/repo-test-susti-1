name: Registro de imagenes - Pipeline

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  validate-minikube:
    runs-on: ubuntu-latest
    name: Validar manifiestos
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Instalar Minikube
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 'latest'
        kubernetes-version: 'stable'
        driver: docker
        container-runtime: docker
        cpus: 2
        memory: 4096m

    - name: Verificar cluster de Kubernetes local
      run: |
        kubectl cluster-info
        kubectl get nodes
        minikube status

    - name: Instalar kubeconform
      run: |
        wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
        tar xf kubeconform-linux-amd64.tar.gz
        sudo mv kubeconform /usr/local/bin

    - name: Validar manifiestos con kubeconform
      run: |
        kubeconform -summary -verbose kubernetes/*.yaml
        echo "Validación completada"

    - name: Verificar sintaxis de manifiestos con kubectl
      run: |
        kubectl apply --dry-run=client -f kubernetes/ || echo "Errores de sintaxis encontrados."
        echo "Sintaxis verificada."

    - name: Aplicar manifiestos de Kubernetes
      run: |
        kubectl apply -f kubernetes/ --validate=true
        echo "Manifiestos aplicados exitosamente"

    - name: Verificar estado del despliegue
      run: |
        kubectl get deployments -A
        kubectl get services -A
        kubectl get pods -A
        echo "Estado del despliegue verificado"

    - name: Esperar a que los pods estén listos
      run: |
        kubectl wait --for=condition=available deployment --all --timeout=300s || echo "Algunos deployments no están disponibles"
        kubectl get pods -A -o wide
        echo "Verificación de pods completada"

    - name: Verificar conectividad de servicios
      run: |
        kubectl get endpoints -A
        kubectl get ingress -A || echo "No hay ingress configurados"
        echo "Conectividad verificada"

    - name: Limpiar manifiestos aplicados
      run: |
        kubectl delete -f kubernetes/ --ignore-not-found=true --timeout=60s
        echo "Manifiestos limpiados exitosamente"

    - name: Verificar limpieza
      run: |
        kubectl get all -A || echo "Verificación de limpieza completada"
        echo "Limpieza verificada"

  build-and-push:
    needs: validate-minikube
    runs-on: ubuntu-latest
    name: Registrar imagenes usadas
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Descargar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Logging en docker
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Utilizar el github username con minusculas
      id: lowercase
      run: |
        echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "repo=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Construir y subir user-service
      uses: docker/build-push-action@v5
      with:
        context: user-service
        push: true
        tags: |
          ghcr.io/${{ steps.lowercase.outputs.repo }}/user-service:latest
          ghcr.io/${{ steps.lowercase.outputs.repo }}/user-service:${{ github.sha }}

    - name: Construir y subir order-service
      uses: docker/build-push-action@v5
      with:
        context: order-service
        push: true
        tags: |
          ghcr.io/${{ steps.lowercase.outputs.repo }}/order-service:latest
          ghcr.io/${{ steps.lowercase.outputs.repo }}/order-service:${{ github.sha }}

    - name: Construir y subir inventory-service
      uses: docker/build-push-action@v5
      with:
        context: inventory-service
        push: true
        tags: |
          ghcr.io/${{ steps.lowercase.outputs.repo }}/inventory-service:latest
          ghcr.io/${{ steps.lowercase.outputs.repo }}/inventory-service:${{ github.sha }}

  cleanup:
    needs: [validate-minikube, build-and-push]
    runs-on: ubuntu-latest
    name: Limpiar estado del pipeline
    if: always()
    steps:
    - name: Limpiar cache de Docker
      run: |
        docker system prune -af --volumes || true

    - name: Limpiar archivos temporales
      run: |
        rm -rf /tmp/* || true
        rm -rf /var/tmp/* || true
        echo "Archivos temporales limpiados"